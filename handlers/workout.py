# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
import json
from pathlib import Path
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.calculations import calculate_workout

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
STORAGE_FILE = Path("data/storage.json")

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class WorkoutLogStates(StatesGroup):
    type_training = State()
    duration_training = State()


def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ JSON."""
    if STORAGE_FILE.exists():
        with open(STORAGE_FILE, "r", encoding="utf-8") as file:
            return json.load(file)
    return {}


def save_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª JSON."""
    STORAGE_FILE.parent.mkdir(parents=True, exist_ok=True)
    with open(STORAGE_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)


@router.message(Command("log_workout"))
async def start_workout_logging(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_workout.
    –ù–∞—á–∞–ª–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:")
    await state.set_state(WorkoutLogStates.type_training)


@router.message(WorkoutLogStates.type_training)
async def process_product_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞.
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        workout_type, duration = message.text.split()
        duration = int(duration)

        if duration <= 0:
            raise ValueError("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏ –∏ –≤–æ–¥—É
        calories, additional_water = calculate_workout(workout_type, duration)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(message.from_user.id)
        all_users = load_data()
        user_data = all_users.get(user_id, {})

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∂–∂–µ–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π
        burned_calories = user_data.get("burned_calories", 0) + calories
        user_data["burned_calories"] = burned_calories

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ—Ä–º—É –≤–æ–¥—ã
        water_norm = user_data.get("water_norm", 0) + additional_water
        user_data["water_norm"] = water_norm

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        all_users[user_id] = user_data
        save_data(all_users)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {workout_type.capitalize()} ({duration} –º–∏–Ω)\n"
            f"–°–æ–∂–∂–µ–Ω–æ: {calories:.0f} –∫–∫–∞–ª\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–ø–µ–π—Ç–µ –≤–æ–¥—ã: {additional_water:.0f} –º–ª\n\n"
            f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∂–∂–µ–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π: {burned_calories:.0f} –∫–∫–∞–ª\n"
            f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_norm:.0f} –º–ª"
        )
        await state.clear()
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö).")
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>")